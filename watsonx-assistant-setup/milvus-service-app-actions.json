{
  "name": "Zimperium-action",
  "type": "action",
  "valid": true,
  "status": "Available",
  "created": "2024-11-14T16:39:01.921Z",
  "updated": "2024-12-11T02:35:46.830Z",
  "language": "en",
  "skill_id": "79408f49-da71-49cb-949c-4bbc091478b5",
  "workspace": {
    "actions": [
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_976",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "input.text"
                  },
                  "skill_variable": "query_text"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_976",
            "next_step": "step_971"
          },
          {
            "step": "step_971",
            "output": {
              "generic": []
            },
            "context": {
              "variables": [
                {
                  "value": {
                    "expression": "[  {    \"fields\": [      \"Text\"    ],    \"values\": [      [${query_text}]    ]  }]"
                  },
                  "skill_variable": "extension_input_data"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_971",
            "next_step": "step_194"
          },
          {
            "step": "step_194",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/queryLLM",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "ea7258bd97e1738e8b35c5d49c1375bf57d06eea89eb80c4f724f6474a9b730a",
                  "match_scenario": 10,
                  "catalog_item_id": "a6270e8e-3a2e-4803-9c2a-5882ef7fec7d"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "skill_variable": "query_text"
                      },
                      "parameter": "question"
                    }
                  ]
                },
                "result_variable": "step_194_result_1"
              }
            },
            "variable": "step_194",
            "next_step": "step_652"
          },
          {
            "step": "step_652",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "variable": "step_194_result_1",
                            "variable_path": "body.response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_652",
            "next_step": "step_197"
          },
          {
            "step": "step_197",
            "handlers": [],
            "resolver": {
              "type": "callout",
              "callout": {
                "path": "/texttosql",
                "type": "integration_interaction",
                "method": "POST",
                "internal": {
                  "spec_hash_id": "686c6c9c109641371ee476c88054f65789e999746082a02bc9fd8b534f8153b2",
                  "match_scenario": 10,
                  "catalog_item_id": "3cd79bcb-43bf-4cba-8390-3d0ad25cb1eb"
                },
                "request_mapping": {
                  "body": [
                    {
                      "value": {
                        "scalar": "MYSQL"
                      },
                      "parameter": "dbtype"
                    },
                    {
                      "value": {
                        "skill_variable": "query_text"
                      },
                      "parameter": "question"
                    },
                    {
                      "value": {
                        "expression": "\"user_id\""
                      },
                      "parameter": "user_id"
                    }
                  ]
                },
                "result_variable": "step_197_result_1"
              }
            },
            "variable": "step_197",
            "next_step": "step_208"
          },
          {
            "step": "step_208",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": ""
                          },
                          {
                            "variable": "step_194_result_1",
                            "variable_path": "body.response"
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "continue"
            },
            "variable": "step_208"
          }
        ],
        "title": "RAG",
        "action": "action_24095",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "action_24095_intent_10919"
        },
        "variables": [
          {
            "title": "No response",
            "privacy": {
              "enabled": true
            },
            "variable": "step_194",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_194_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": true
            },
            "variable": "step_197",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_197_result_1",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "privacy": {
              "enabled": true
            },
            "variable": "step_208",
            "data_type": "any"
          },
          {
            "title": "{variable}",
            "privacy": {
              "enabled": true
            },
            "variable": "step_652",
            "data_type": "any"
          },
          {
            "title": "",
            "variable": "step_971",
            "data_type": "any"
          },
          {
            "title": "",
            "variable": "step_976",
            "data_type": "any"
          }
        ],
        "launch_mode": "learning",
        "next_action": "fallback",
        "topic_switch": {
          "allowed_from": true,
          "allowed_into": true,
          "never_return": false
        },
        "disambiguation_opt_out": false
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_558",
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "action_24095",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_558_result_1"
              }
            },
            "variable": "step_558",
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. Please rephrase your question."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001",
            "condition": {
              "lte": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": ""
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "invoke_another_action_and_end",
              "invoke_action": {
                "action": "fallback",
                "policy": "default",
                "parameters": null,
                "result_variable": "step_002_result_1"
              }
            },
            "variable": "step_002",
            "condition": {
              "gt": [
                {
                  "system_variable": "no_action_matches_count"
                },
                {
                  "scalar": 3
                }
              ]
            }
          }
        ],
        "title": "No action matches",
        "action": "anything_else",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "anything_else"
        },
        "variables": [
          {
            "title": "I am afraid I do not understand what you are asking, please re-p",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "variable": "step_002_result_1",
            "data_type": "any"
          },
          {
            "title": "No response",
            "privacy": {
              "enabled": false
            },
            "variable": "step_558",
            "data_type": "any"
          },
          {
            "privacy": {
              "enabled": false
            },
            "variable": "step_558_result_1",
            "data_type": "any"
          }
        ],
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "digression_failure",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't confirm if you wanted to return to previous topic, let me connect to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "digression_failure",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Failed to confirm topic return"
                }
              ]
            },
            "next_step": "step_001"
          },
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I'm afraid I don't understand. I can connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_001",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Step validation failed"
                }
              ]
            },
            "next_step": "step_002"
          },
          {
            "step": "step_002",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Sorry I couldn't assist you. I will connect you to an agent right away."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_002",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Agent requested"
                }
              ]
            },
            "next_step": "step_003"
          },
          {
            "step": "step_003",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "I am afraid I do not understand what you are asking, let me connect you to an agent."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_003",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "No action matches"
                }
              ]
            },
            "next_step": "step_004"
          },
          {
            "step": "step_004",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_004",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Danger word detected"
                }
              ]
            },
            "next_step": "step_005"
          },
          {
            "step": "step_005",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "It seems this conversation would be best managed by a human agent. Let me connect you to one of our agents."
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "connect_to_agent",
              "response": {
                "transfer_info": {
                  "target": {}
                },
                "agent_available": {
                  "message": "Let's send you to an available agent."
                },
                "agent_unavailable": {
                  "message": "There are no agents available at this time. When one becomes available, we'll connect you."
                },
                "message_to_human_agent": ""
              }
            },
            "variable": "step_005",
            "condition": {
              "eq": [
                {
                  "system_variable": "fallback_reason"
                },
                {
                  "scalar": "Profanity detected"
                }
              ]
            }
          }
        ],
        "title": "Fallback",
        "action": "fallback",
        "boosts": [],
        "handlers": [],
        "condition": {
          "intent": "fallback_connect_to_agent"
        },
        "variables": [
          {
            "title": "Topic return failed",
            "variable": "digression_failure",
            "data_type": "any"
          },
          {
            "title": "I'm afraid I don't understand. I can connect you to an agent.",
            "variable": "step_001",
            "data_type": "any"
          },
          {
            "title": "Sorry I couldn't assist you. I will connect you to an agent righ",
            "variable": "step_002",
            "data_type": "any"
          },
          {
            "title": "I am afraid I do not understand what you are asking, let me conn",
            "variable": "step_003",
            "data_type": "any"
          },
          {
            "title": "It seems this conversation would be best managed",
            "variable": "step_004",
            "data_type": "any"
          },
          {
            "title": "Profanity - It seems this conversation",
            "variable": "step_005",
            "data_type": "any"
          }
        ],
        "next_action": "run_always",
        "disambiguation_opt_out": true
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "danger_word_detected",
            "title": "Connect to agent",
            "handlers": [],
            "resolver": {
              "type": "fallback"
            },
            "variable": "danger_word_detected_variable",
            "condition": {
              "entity": "danger_words"
            },
            "next_step": "profanity_detected"
          },
          {
            "step": "profanity_detected",
            "title": "Show warning",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text_expression": {
                        "concat": [
                          {
                            "scalar": "Please use appropriate language when interacting with the assistant."
                          }
                        ]
                      }
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [
              {
                "type": "max_hits",
                "handler": "max_hits_handler",
                "resolver": {
                  "type": "fallback"
                }
              }
            ],
            "max_hits": 2,
            "resolver": {
              "type": "end_action"
            },
            "variable": "profanity_detected_variable",
            "condition": {
              "entity": "profane_words"
            }
          }
        ],
        "title": "Trigger word detected",
        "action": "run_always",
        "boosts": [],
        "handlers": [],
        "variables": [
          {
            "title": "Profanity detected",
            "variable": "danger_word_detected_variable",
            "data_type": "any"
          },
          {
            "title": "Profane word detected",
            "variable": "profanity_detected_variable",
            "data_type": "any"
          }
        ],
        "next_action": "anything_else"
      },
      {
        "type": "standard",
        "steps": [
          {
            "step": "step_001",
            "output": {
              "generic": [
                {
                  "values": [
                    {
                      "text": "Welcome, how can I assist you?"
                    }
                  ],
                  "response_type": "text",
                  "selection_policy": "sequential"
                }
              ]
            },
            "handlers": [],
            "resolver": {
              "type": "end_action"
            },
            "variable": "step_001"
          }
        ],
        "title": "Greet customer",
        "action": "welcome",
        "boosts": [],
        "handlers": [],
        "condition": {
          "expression": "welcome"
        },
        "variables": [
          {
            "variable": "step_001",
            "data_type": "any"
          }
        ],
        "next_action": "action_24095",
        "disambiguation_opt_out": true
      }
    ],
    "intents": [
      {
        "intent": "action_24095_intent_10919",
        "examples": []
      },
      {
        "intent": "fallback_connect_to_agent",
        "examples": [
          {
            "text": "Agent help"
          },
          {
            "text": "Call agent"
          },
          {
            "text": "Can I connect to an agent?"
          },
          {
            "text": "I would like to speak to a human"
          },
          {
            "text": "I would like to speak to someone"
          }
        ],
        "description": "Please transfer me to an agent"
      }
    ],
    "entities": [
      {
        "entity": "danger_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "entity_17250",
        "values": [
          {
            "type": "patterns",
            "value": "Regular_expression",
            "patterns": [
              "\"^(?:.*[a-z])(?:.*[A-Z])(?:.*\\d)(?:.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$\""
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "entity_25899",
        "values": [
          {
            "type": "patterns",
            "value": "Email",
            "patterns": [
              "\\b(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\b"
            ]
          }
        ],
        "fuzzy_match": true
      },
      {
        "entity": "profane_words",
        "values": [],
        "fuzzy_match": false
      },
      {
        "entity": "sys-currency",
        "values": []
      },
      {
        "entity": "sys-date",
        "values": []
      },
      {
        "entity": "sys-number",
        "values": []
      },
      {
        "entity": "sys-percentage",
        "values": []
      },
      {
        "entity": "sys-time",
        "values": []
      },
      {
        "entity": "sys-yes-no",
        "values": []
      }
    ],
    "metadata": {
      "api_version": {
        "major_version": "v2",
        "minor_version": "2018-11-08"
      }
    },
    "variables": [
      {
        "title": "discovery_date_version",
        "variable": "discovery_date_version",
        "data_type": "any",
        "description": "Discovery date versions are documented in the release notes (https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-release-notes).",
        "initial_value": {
          "scalar": "2022-08-01"
        }
      },
      {
        "title": "discovery_project_id",
        "privacy": {
          "enabled": false
        },
        "variable": "discovery_project_id",
        "data_type": "string",
        "description": "You MUST set this value to the project ID of the Discovery project containing your data",
        "initial_value": {
          "scalar": "a8419175-adf9-42ee-b390-1583700f66ef"
        }
      },
      {
        "title": "extension_input_data",
        "variable": "extension_input_data",
        "data_type": "any",
        "description": "Formatted user query for WML deployment",
        "initial_value": {
          "expression": "[  {    \"fields\": [      \"Text\"    ],    \"values\": [      [input.text]    ]  }]"
        }
      },
      {
        "title": "jsonResult",
        "variable": "jsonResult",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "jsonStopSequence",
        "variable": "jsonStopSequence",
        "data_type": "string",
        "description": "",
        "initial_value": {
          "expression": "[\".END\"]"
        }
      },
      {
        "title": "model_id",
        "variable": "model_id",
        "data_type": "string",
        "description": "The ID of the model to be used for this user prompt. Please refer to the list of models at https://bam.res.ibm.com/docs/models",
        "initial_value": {
          "scalar": "meta-llama/llama-2-13b-chat"
        }
      },
      {
        "title": "model_input",
        "variable": "model_input",
        "data_type": "string",
        "description": "input to the watsonx model"
      },
      {
        "title": "model_parameters_max_new_tokens",
        "variable": "model_parameters_max_new_tokens",
        "data_type": "number",
        "description": "The maximum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 300
        }
      },
      {
        "title": "model_parameters_min_new_tokens",
        "variable": "model_parameters_min_new_tokens",
        "data_type": "number",
        "description": "The minimum number of new tokens to be generated.",
        "initial_value": {
          "scalar": 1
        }
      },
      {
        "title": "model_parameters_repetition_penalty",
        "variable": "model_parameters_repetition_penalty",
        "data_type": "number",
        "description": "",
        "initial_value": {
          "scalar": 1
        }
      },
      {
        "title": "model_parameters_stop_sequences",
        "variable": "model_parameters_stop_sequences",
        "data_type": "any",
        "description": "",
        "initial_value": {
          "expression": "[ \"\\n\\n\"]"
        }
      },
      {
        "title": "model_parameters_temperature",
        "variable": "model_parameters_temperature",
        "data_type": "number",
        "description": "he value used to control the next token probabilities. The range is from 0.05 to 1.00; 0.05 makes it mostly deterministic.",
        "initial_value": {
          "scalar": 0
        }
      },
      {
        "title": "model_response",
        "variable": "model_response",
        "data_type": "string",
        "description": "The text generated by the model in response to the model input"
      },
      {
        "title": "passages",
        "variable": "passages",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "Prmopt",
        "variable": "Prmopt",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "query_text",
        "variable": "query_text",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "result",
        "variable": "result",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "search_results",
        "variable": "search_results",
        "data_type": "any",
        "description": "Response object from Discovery query (https://cloud.ibm.com/apidocs/discovery-data#query)."
      },
      {
        "title": "snippet",
        "variable": "snippet",
        "data_type": "any",
        "description": ""
      },
      {
        "title": "stopSequence",
        "variable": "stopSequence",
        "data_type": "string",
        "description": "",
        "initial_value": {
          "expression": "[\";\"]"
        }
      },
      {
        "title": "Train",
        "variable": "Train",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "TrainJSON",
        "variable": "TrainJSON",
        "data_type": "string",
        "description": ""
      },
      {
        "title": "verbose",
        "variable": "verbose",
        "data_type": "boolean",
        "description": "Prints debug output when true",
        "initial_value": {
          "scalar": false
        }
      },
      {
        "title": "watsonx_api_version",
        "variable": "watsonx_api_version",
        "data_type": "any",
        "description": "The version of the watsonx api (required)",
        "initial_value": {
          "scalar": "2023-05-29"
        }
      },
      {
        "title": "watsonx_project_id",
        "privacy": {
          "enabled": false
        },
        "variable": "watsonx_project_id",
        "data_type": "any",
        "description": "You MUST set this to your watsonx project id",
        "initial_value": {
          "scalar": "6dda63be-e337-423b-b2ed-20a8421c7b4c"
        }
      },
      {
        "title": "wml_deployment_version",
        "variable": "wml_deployment_version",
        "data_type": "date",
        "description": "Default expected version date for Watson Machine Learning",
        "initial_value": {
          "time": {
            "value": "2021-05-01"
          }
        }
      }
    ],
    "data_types": [],
    "collections": [],
    "counterexamples": [],
    "system_settings": {
      "nlp": {
        "model": "latest"
      },
      "variable": {
        "format": {
          "time": {
            "pattern": "short"
          },
          "currency": {
            "fraction_digits": 2
          }
        }
      },
      "off_topic": {
        "enabled": true
      },
      "topic_switch": {
        "enabled": true,
        "messages": {
          "enable_confirmation": true,
          "confirmation_failure": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "I'm sorry, I did not catch that, please confirm."
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              }
            ]
          },
          "confirmation_request": {
            "generic": [
              {
                "values": [
                  {
                    "text_expression": {
                      "concat": [
                        {
                          "scalar": "Do you want to continue with the previous topic: "
                        },
                        {
                          "system_variable": "digressed_from"
                        },
                        {
                          "scalar": "?"
                        }
                      ]
                    }
                  }
                ],
                "response_type": "text",
                "selection_policy": "sequential"
              },
              {
                "options": [
                  {
                    "label": "Yes",
                    "value": {
                      "input": {
                        "text": "Yes"
                      }
                    }
                  },
                  {
                    "label": "No",
                    "value": {
                      "input": {
                        "text": "No"
                      }
                    }
                  }
                ],
                "response_type": "option",
                "repeat_on_reprompt": true
              }
            ]
          }
        },
        "max_tries": 3
      },
      "generative_ai": {
        "model_id": "ibm/granite-3-8b-instruct"
      },
      "disambiguation": {
        "prompt": "Did you mean:",
        "enabled": true,
        "randomize": true,
        "max_suggestions": 5,
        "suggestion_text_policy": "title",
        "none_of_the_above_prompt": "None of the above",
        "use_connect_to_support_prompt": "connect to support",
        "single_answer_clarification_prompt": "Something else"
      },
      "spelling_auto_correct": true
    },
    "learning_opt_out": true
  },
  "description": "created for assistant 1c76effb-2430-4334-8897-6cdad3c6282b",
  "assistant_id": "fd948f46-e520-4171-8e92-7170553f5ca7",
  "workspace_id": "79408f49-da71-49cb-949c-4bbc091478b5",
  "dialog_settings": {},
  "next_snapshot_version": "1",
  "environment_id": "28ce164e-5eba-42b1-a166-d8480d3f0eeb"
}